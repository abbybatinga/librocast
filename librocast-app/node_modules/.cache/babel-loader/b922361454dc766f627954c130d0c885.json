{"ast":null,"code":"var _jsxFileName = \"/Users/kihoonlee/Documents/University of Washington/CSE 403/librocast/librocast-app/src/components/Search.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './Search.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOOK_URL = \"\";\nconst USER_URL = \"\";\nconst NUM_PAGE_RESULTS = 20;\nexport default function Search() {\n  _s();\n\n  const [query, setQuery] = useState(\"\");\n  const url = new URLSearchParams(window.location.search); //check for properly formatted url\n\n  if (url.has(\"type\") && url.has(\"string\")) {\n    const type = url.get(\"type\");\n    const string = url.get(\"string\"); // TODO: filter out unnecessary params\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        type: type,\n        string: string\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(QueryResults, {\n        searchType: type,\n        searchString: string\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  } else if (window.location.search !== \"\") {\n    window.location = window.location.pathname;\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(SearchBar, {\n        type: \"book\",\n        string: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  }\n\n  function clearDisplay() {//reset search state\n  }\n}\n\n_s(Search, \"HYX2QbDDdTtlu7GfoQbAPZOIM6k=\");\n\n_c = Search;\n\nfunction SearchBar(_ref) {\n  _s2();\n\n  let {\n    type,\n    string\n  } = _ref;\n  const [searchInput, setSearchInput] = useState(string);\n  const [searchType, setSearchType] = useState(type);\n  const navigate = useNavigate();\n\n  function handleSubmit(e) {\n    e.preventDefault(); // TODO: make sure searchInput is empty or not white space\n\n    let url = new URLSearchParams();\n    url.append(\"type\", searchType.toString());\n    url.append(\"string\", searchInput.toString());\n    window.location.href = \"?\" + url.toString();\n  }\n\n  function handleChange(e) {\n    setSearchInput(e.target.value); // TODO:if searchInput is empty or white space make search button grey\n  }\n\n  function updateType(e) {\n    setSearchType(e.target.value);\n  }\n\n  return (\n    /*#__PURE__*/\n    //<label htmlFor=\"site-search\">Search the site</label>\n    _jsxDEV(\"form\", {\n      className: \"searchBar\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"searchType\",\n        name: \"type\",\n        value: searchType.toString(),\n        onChange: updateType,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"book\",\n          children: \"Books\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"user\",\n          children: \"Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"searchInput\",\n        type: \"search\",\n        placeholder: \"search\",\n        value: searchInput,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"searchButton\",\n        type: \"Submit\",\n        Value: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s2(SearchBar, \"/PtDRCq9C9YMTmVziuxwsyLZH6g=\", false, function () {\n  return [useNavigate];\n});\n\n_c2 = SearchBar;\n\nfunction QueryResults(_ref2) {\n  _s3();\n\n  let {\n    searchType,\n    searchString\n  } = _ref2;\n  const [response, setResponse] = useState(processQuery());\n  const [results, setResults] = useState([]);\n  const [responseLength, setResponseLength] = useState(0);\n  const [index, setIndex] = useState(0);\n\n  function processQuery() {\n    // TODO: fetch query response\n    // TODO: case-user\n    // TODO: case-book\n    if (searchType === \"book\") {//TODO: fetch books\n      //set response state\n    } else if (searchType === \"user\") {//TODO: fetch users\n      //set response state\n    }\n\n    appendResults();\n  }\n\n  function appendResults() {\n    let count;\n    let res = results;\n\n    if (index + NUM_PAGE_RESULTS <= responseLength) {\n      count = NUM_PAGE_RESULTS;\n    } else {\n      count = responseLength - index;\n    }\n\n    for (let i = 0; i < count; i++) {\n      let entry = response[i];\n      res.push( /*#__PURE__*/_jsxDEV(BookSearchResult, {\n        bookID: entry[\"id\"],\n        title: entry[\"title\"],\n        author: entry[\"author\"],\n        cover: entry[\"cover_link\"]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this));\n    }\n\n    setIndex(index + count);\n    setResults(res);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [results, /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: appendResults,\n      children: \"More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(QueryResults, \"kJwDyQm1WwkRUG+iyfMCU3oddWI=\");\n\n_c3 = QueryResults;\n\nfunction BookSearchResult(_ref3) {\n  _s4();\n\n  let {\n    bookID,\n    title,\n    author,\n    cover\n  } = _ref3;\n  const [id, setId] = useState(bookID);\n\n  function addToLibrary() {//TODO: add book to users library\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bookSearchResult\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: cover,\n      alt: \"Cover Image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: addToLibrary,\n      children: \"Add Book\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n\n_s4(BookSearchResult, \"JDLZVbN6Dw6k66q95dPKRCYkUFM=\");\n\n_c4 = BookSearchResult;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Search\");\n$RefreshReg$(_c2, \"SearchBar\");\n$RefreshReg$(_c3, \"QueryResults\");\n$RefreshReg$(_c4, \"BookSearchResult\");","map":{"version":3,"sources":["/Users/kihoonlee/Documents/University of Washington/CSE 403/librocast/librocast-app/src/components/Search.js"],"names":["React","useState","useNavigate","BOOK_URL","USER_URL","NUM_PAGE_RESULTS","Search","query","setQuery","url","URLSearchParams","window","location","search","has","type","get","string","pathname","clearDisplay","SearchBar","searchInput","setSearchInput","searchType","setSearchType","navigate","handleSubmit","e","preventDefault","append","toString","href","handleChange","target","value","updateType","QueryResults","searchString","response","setResponse","processQuery","results","setResults","responseLength","setResponseLength","index","setIndex","appendResults","count","res","i","entry","push","BookSearchResult","bookID","title","author","cover","id","setId","addToLibrary"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport { useNavigate } from 'react-router-dom'\n\nimport './Search.css'\n\nconst BOOK_URL = \"\";\nconst USER_URL = \"\";\nconst NUM_PAGE_RESULTS = 20;\n\nexport default function Search() {\n  const [query, setQuery] = useState(\"\");\n  const url = new URLSearchParams(window.location.search);\n\n  //check for properly formatted url\n  if (url.has(\"type\") && url.has(\"string\")) {\n    const type = url.get(\"type\");\n    const string = url.get(\"string\");\n    // TODO: filter out unnecessary params\n    return (\n      <div>\n        <SearchBar type={type} string={string}/>\n        <QueryResults searchType={type} searchString={string}/>\n      </div>\n    );\n  } else if (window.location.search !== \"\") {\n    window.location = window.location.pathname;\n  } else {\n    return (\n      <div>\n        <SearchBar type={\"book\"} string={\"\"}/>\n      </div>\n    );\n  }\n\n  function clearDisplay() {\n    //reset search state\n  }\n\n}\n\nfunction SearchBar({type, string}) {\n  const [searchInput, setSearchInput] = useState(string);\n  const [searchType, setSearchType] = useState(type);\n  const navigate = useNavigate();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    // TODO: make sure searchInput is empty or not white space\n    let url = new URLSearchParams();\n    url.append(\"type\", searchType.toString());\n    url.append(\"string\", searchInput.toString());\n    window.location.href = \"?\" + url.toString();\n  }\n\n  function handleChange(e) {\n    setSearchInput(e.target.value);\n    // TODO:if searchInput is empty or white space make search button grey\n  }\n\n  function updateType(e) {\n    setSearchType(e.target.value);\n  }\n\n  return (\n    //<label htmlFor=\"site-search\">Search the site</label>\n    <form className={\"searchBar\"} onSubmit={handleSubmit}>\n\n      <select className={\"searchType\"} name=\"type\" value={searchType.toString()} onChange={updateType}>\n        <option value=\"book\">Books</option>\n        <option value=\"user\">Users</option>\n      </select>\n      <input className={\"searchInput\"} type=\"search\" placeholder=\"search\" value={searchInput} onChange={handleChange}/>\n      <input className={\"searchButton\"} type=\"Submit\" Value=\"Search\"/>\n    </form>\n  );\n}\n\nfunction QueryResults({searchType, searchString}) {\n  const [response, setResponse] = useState(processQuery());\n  const [results, setResults] = useState([]);\n  const [responseLength, setResponseLength] = useState(0);\n  const [index, setIndex] = useState(0);\n\n  function processQuery() {\n    // TODO: fetch query response\n    // TODO: case-user\n    // TODO: case-book\n    if (searchType === \"book\") {\n      //TODO: fetch books\n      //set response state\n\n\n    } else if (searchType === \"user\") {\n      //TODO: fetch users\n      //set response state\n    }\n    appendResults();\n  }\n\n  function appendResults() {\n    let count;\n    let res = results;\n    if (index + NUM_PAGE_RESULTS <= responseLength) {\n      count = NUM_PAGE_RESULTS;\n    } else {\n      count = responseLength - index;\n    }\n    for (let i = 0; i < count; i++) {\n      let entry = response[i];\n      res.push(\n        <BookSearchResult bookID={entry[\"id\"]} title={entry[\"title\"]} author={entry[\"author\"]} cover={entry[\"cover_link\"]}/>\n      );\n    }\n    setIndex(index + count);\n    setResults(res);\n  }\n\n\n  return (\n    <div>\n      {results}\n      <button type={\"button\"} onClick={appendResults}>More</button>\n    </div>\n  );\n}\n\nfunction BookSearchResult({bookID, title, author, cover}) {\n  const [id, setId] = useState(bookID);\n\n  function addToLibrary() {\n    //TODO: add book to users library\n  }\n\n\n  return (\n    <div className={\"bookSearchResult\"}>\n      <h3>{title}</h3>\n      <img src={cover} alt={\"Cover Image\"}/>\n      <h4>{author}</h4>\n      <button type={\"button\"} onClick={addToLibrary}>Add Book</button>\n    </div>\n  )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}